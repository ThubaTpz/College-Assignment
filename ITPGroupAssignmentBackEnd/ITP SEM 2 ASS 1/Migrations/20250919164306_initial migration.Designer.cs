// <auto-generated />
using System;
using ITP_SEM_2_ASS_1.Models.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ITP_SEM_2_ASS_1.Migrations
{
    [DbContext(typeof(applicationDbContext))]
    [Migration("20250919164306_initial migration")]
    partial class initialmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseLecturer", b =>
                {
                    b.Property<Guid>("CoursesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LecturesLecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CoursesId", "LecturesLecturerId");

                    b.HasIndex("LecturesLecturerId");

                    b.ToTable("CourseLecturer");
                });

            modelBuilder.Entity("CourseModule", b =>
                {
                    b.Property<Guid>("CoursesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("modulesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CoursesId", "modulesId");

                    b.HasIndex("modulesId");

                    b.ToTable("CourseModule");
                });

            modelBuilder.Entity("ITP_SEM_2_ASS_1.Models.Entitties.Admin", b =>
                {
                    b.Property<Guid>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("dateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("homeAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("ITP_SEM_2_ASS_1.Models.Entitties.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ITP_SEM_2_ASS_1.Models.Entitties.Lecturer", b =>
                {
                    b.Property<Guid>("LecturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("dateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("homeAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LecturerId");

                    b.HasIndex("AdminId");

                    b.ToTable("lecturers");
                });

            modelBuilder.Entity("ITP_SEM_2_ASS_1.Models.Entitties.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("credits")
                        .HasColumnType("int");

                    b.Property<string>("moduleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("ITP_SEM_2_ASS_1.Models.Entitties.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("dateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("homeAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.HasIndex("AdminId");

                    b.HasIndex("CourseId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ITP_SEM_2_ASS_1.Models.Entitties.TaskItem", b =>
                {
                    b.Property<Guid>("TaskItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dueDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskItemId");

                    b.HasIndex("ModuleId");

                    b.ToTable("TaskItems");
                });

            modelBuilder.Entity("LecturerModule", b =>
                {
                    b.Property<Guid>("LecturersLecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModulesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LecturersLecturerId", "ModulesId");

                    b.HasIndex("ModulesId");

                    b.ToTable("LecturerModule");
                });

            modelBuilder.Entity("LecturerStudent", b =>
                {
                    b.Property<Guid>("LecturersLecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentsStudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LecturersLecturerId", "StudentsStudentId");

                    b.HasIndex("StudentsStudentId");

                    b.ToTable("LecturerStudent");
                });

            modelBuilder.Entity("LecturerTaskItem", b =>
                {
                    b.Property<Guid>("LecturersLecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TasksTaskItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LecturersLecturerId", "TasksTaskItemId");

                    b.HasIndex("TasksTaskItemId");

                    b.ToTable("LecturerTaskItem");
                });

            modelBuilder.Entity("StudentTaskItem", b =>
                {
                    b.Property<Guid>("StudentsStudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TasksTaskItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentsStudentId", "TasksTaskItemId");

                    b.HasIndex("TasksTaskItemId");

                    b.ToTable("StudentTaskItem");
                });

            modelBuilder.Entity("CourseLecturer", b =>
                {
                    b.HasOne("ITP_SEM_2_ASS_1.Models.Entitties.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITP_SEM_2_ASS_1.Models.Entitties.Lecturer", null)
                        .WithMany()
                        .HasForeignKey("LecturesLecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseModule", b =>
                {
                    b.HasOne("ITP_SEM_2_ASS_1.Models.Entitties.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITP_SEM_2_ASS_1.Models.Entitties.Module", null)
                        .WithMany()
                        .HasForeignKey("modulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITP_SEM_2_ASS_1.Models.Entitties.Course", b =>
                {
                    b.HasOne("ITP_SEM_2_ASS_1.Models.Entitties.Admin", null)
                        .WithMany("Courses")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("ITP_SEM_2_ASS_1.Models.Entitties.Lecturer", b =>
                {
                    b.HasOne("ITP_SEM_2_ASS_1.Models.Entitties.Admin", null)
                        .WithMany("Lecturers")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("ITP_SEM_2_ASS_1.Models.Entitties.Module", b =>
                {
                    b.HasOne("ITP_SEM_2_ASS_1.Models.Entitties.Admin", null)
                        .WithMany("Modules")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("ITP_SEM_2_ASS_1.Models.Entitties.Student", b =>
                {
                    b.HasOne("ITP_SEM_2_ASS_1.Models.Entitties.Admin", null)
                        .WithMany("Students")
                        .HasForeignKey("AdminId");

                    b.HasOne("ITP_SEM_2_ASS_1.Models.Entitties.Course", null)
                        .WithMany("Students")
                        .HasForeignKey("CourseId");

                    b.HasOne("ITP_SEM_2_ASS_1.Models.Entitties.Module", null)
                        .WithMany("Students")
                        .HasForeignKey("ModuleId");
                });

            modelBuilder.Entity("ITP_SEM_2_ASS_1.Models.Entitties.TaskItem", b =>
                {
                    b.HasOne("ITP_SEM_2_ASS_1.Models.Entitties.Module", null)
                        .WithMany("Tasks")
                        .HasForeignKey("ModuleId");
                });

            modelBuilder.Entity("LecturerModule", b =>
                {
                    b.HasOne("ITP_SEM_2_ASS_1.Models.Entitties.Lecturer", null)
                        .WithMany()
                        .HasForeignKey("LecturersLecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITP_SEM_2_ASS_1.Models.Entitties.Module", null)
                        .WithMany()
                        .HasForeignKey("ModulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LecturerStudent", b =>
                {
                    b.HasOne("ITP_SEM_2_ASS_1.Models.Entitties.Lecturer", null)
                        .WithMany()
                        .HasForeignKey("LecturersLecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITP_SEM_2_ASS_1.Models.Entitties.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LecturerTaskItem", b =>
                {
                    b.HasOne("ITP_SEM_2_ASS_1.Models.Entitties.Lecturer", null)
                        .WithMany()
                        .HasForeignKey("LecturersLecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITP_SEM_2_ASS_1.Models.Entitties.TaskItem", null)
                        .WithMany()
                        .HasForeignKey("TasksTaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentTaskItem", b =>
                {
                    b.HasOne("ITP_SEM_2_ASS_1.Models.Entitties.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITP_SEM_2_ASS_1.Models.Entitties.TaskItem", null)
                        .WithMany()
                        .HasForeignKey("TasksTaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITP_SEM_2_ASS_1.Models.Entitties.Admin", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Lecturers");

                    b.Navigation("Modules");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("ITP_SEM_2_ASS_1.Models.Entitties.Course", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("ITP_SEM_2_ASS_1.Models.Entitties.Module", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
