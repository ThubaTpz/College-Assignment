// <auto-generated />
using System;
using EduCoreCRUD_Backend.Models.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduCoreCRUD_Backend.Migrations
{
    [DbContext(typeof(EduCoreDBContext))]
    [Migration("20251003135905_NewMigration")]
    partial class NewMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseLecturer", b =>
                {
                    b.Property<Guid>("CoursesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LecturersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CoursesId", "LecturersId");

                    b.HasIndex("LecturersId");

                    b.ToTable("CourseLecturer");
                });

            modelBuilder.Entity("CourseModule", b =>
                {
                    b.Property<Guid>("CoursesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModulesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CoursesId", "ModulesId");

                    b.HasIndex("ModulesId");

                    b.ToTable("CourseModule");
                });

            modelBuilder.Entity("EduCoreCRUD_Backend.Models.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("admin");
                });

            modelBuilder.Entity("EduCoreCRUD_Backend.Models.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("course");
                });

            modelBuilder.Entity("EduCoreCRUD_Backend.Models.Entities.Lecturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("lecturer");
                });

            modelBuilder.Entity("EduCoreCRUD_Backend.Models.Entities.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<string>("ModuleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("module");
                });

            modelBuilder.Entity("EduCoreCRUD_Backend.Models.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("CourseId");

                    b.HasIndex("ModuleId");

                    b.ToTable("student");
                });

            modelBuilder.Entity("EduCoreCRUD_Backend.Models.Entities.TaskItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DueDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("taskItem");
                });

            modelBuilder.Entity("LecturerModule", b =>
                {
                    b.Property<Guid>("LecturersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModulesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LecturersId", "ModulesId");

                    b.HasIndex("ModulesId");

                    b.ToTable("LecturerModule");
                });

            modelBuilder.Entity("LecturerStudent", b =>
                {
                    b.Property<Guid>("LecturersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LecturersId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("LecturerStudent");
                });

            modelBuilder.Entity("LecturerTaskItem", b =>
                {
                    b.Property<Guid>("LecturersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TasksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LecturersId", "TasksId");

                    b.HasIndex("TasksId");

                    b.ToTable("LecturerTaskItem");
                });

            modelBuilder.Entity("StudentTaskItem", b =>
                {
                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TasksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentsId", "TasksId");

                    b.HasIndex("TasksId");

                    b.ToTable("StudentTaskItem");
                });

            modelBuilder.Entity("CourseLecturer", b =>
                {
                    b.HasOne("EduCoreCRUD_Backend.Models.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduCoreCRUD_Backend.Models.Entities.Lecturer", null)
                        .WithMany()
                        .HasForeignKey("LecturersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseModule", b =>
                {
                    b.HasOne("EduCoreCRUD_Backend.Models.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduCoreCRUD_Backend.Models.Entities.Module", null)
                        .WithMany()
                        .HasForeignKey("ModulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EduCoreCRUD_Backend.Models.Entities.Course", b =>
                {
                    b.HasOne("EduCoreCRUD_Backend.Models.Entities.Admin", null)
                        .WithMany("Courses")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("EduCoreCRUD_Backend.Models.Entities.Lecturer", b =>
                {
                    b.HasOne("EduCoreCRUD_Backend.Models.Entities.Admin", null)
                        .WithMany("Lecturers")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("EduCoreCRUD_Backend.Models.Entities.Module", b =>
                {
                    b.HasOne("EduCoreCRUD_Backend.Models.Entities.Admin", null)
                        .WithMany("Modules")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("EduCoreCRUD_Backend.Models.Entities.Student", b =>
                {
                    b.HasOne("EduCoreCRUD_Backend.Models.Entities.Admin", null)
                        .WithMany("Students")
                        .HasForeignKey("AdminId");

                    b.HasOne("EduCoreCRUD_Backend.Models.Entities.Course", null)
                        .WithMany("Students")
                        .HasForeignKey("CourseId");

                    b.HasOne("EduCoreCRUD_Backend.Models.Entities.Module", null)
                        .WithMany("Students")
                        .HasForeignKey("ModuleId");
                });

            modelBuilder.Entity("EduCoreCRUD_Backend.Models.Entities.TaskItem", b =>
                {
                    b.HasOne("EduCoreCRUD_Backend.Models.Entities.Module", null)
                        .WithMany("Tasks")
                        .HasForeignKey("ModuleId");
                });

            modelBuilder.Entity("LecturerModule", b =>
                {
                    b.HasOne("EduCoreCRUD_Backend.Models.Entities.Lecturer", null)
                        .WithMany()
                        .HasForeignKey("LecturersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduCoreCRUD_Backend.Models.Entities.Module", null)
                        .WithMany()
                        .HasForeignKey("ModulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LecturerStudent", b =>
                {
                    b.HasOne("EduCoreCRUD_Backend.Models.Entities.Lecturer", null)
                        .WithMany()
                        .HasForeignKey("LecturersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduCoreCRUD_Backend.Models.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LecturerTaskItem", b =>
                {
                    b.HasOne("EduCoreCRUD_Backend.Models.Entities.Lecturer", null)
                        .WithMany()
                        .HasForeignKey("LecturersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduCoreCRUD_Backend.Models.Entities.TaskItem", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentTaskItem", b =>
                {
                    b.HasOne("EduCoreCRUD_Backend.Models.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduCoreCRUD_Backend.Models.Entities.TaskItem", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EduCoreCRUD_Backend.Models.Entities.Admin", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Lecturers");

                    b.Navigation("Modules");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EduCoreCRUD_Backend.Models.Entities.Course", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("EduCoreCRUD_Backend.Models.Entities.Module", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
